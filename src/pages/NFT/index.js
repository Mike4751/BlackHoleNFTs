import { useRouter } from "next/router";

import Head from "next/head";
import Link from "next/link";

import { useAccount, useNetwork } from "wagmi";

import { Alchemy, Network, Utils } from "alchemy-sdk";

import { useState, useEffect } from "react";

import Header from "/home/mikey/au/final-project/nft-aggregator/src/components/Header.js";
import DetailButton from "@/components/DetailButton";

export default function NFT({ address, tokenId }) {
  const { isConnected, isConnecting } = useAccount();
  const { chain } = useNetwork();
  const [tokenAddress, setTokenAddress] = useState(address);
  const [attributeIndex, setAttributeIndex] = useState(-1);
  const [detailIndex, setDetailIndex] = useState(-1);
  const [detailModal, setDetailModal] = useState(false);
  const [attributeModal, setAttributeModal] = useState(false);
  const [data, setData] = useState();
  const [detailList, setDetailList] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function start() {
      const chainId = chain == undefined ? 1 : chain.id;
      console.log(chainId);

      const settings = {
        apiKey:
          chainId == 1 || chainId == 1337
            ? process.env.MAIN_API_KEY
            : chainId == 137
            ? process.env.POLY_API_KEY
            : process.env.GOERLI_API_KEY,
        network:
          chainId == 1 || chainId == 1337
            ? Network.ETH_MAINNET
            : chainId == 137
            ? Network.MATIC_MAINNET
            : Network.ETH_GOERLI,
      };
      const alchemy = new Alchemy(settings);
      const NFT = await alchemy.nft.getNftMetadata(address, tokenId);
      console.log("NFT", NFT);
      const dataObject = {
        gateway:
          // NFTs[i].metadataError == "Failed to get token uri" ||
          NFT.media.length === 0
            ? "/blackhole.png"
            : NFT.media[0].gateway === undefined
            ? "/blackhole.png"
            : NFT.media[0].gateway,
        format: NFT.media.length === 0 ? "png" : NFT.media[0].format,
        contractName: NFT.contract.name,
        name: NFT.rawMetadata.name,
        description:
          NFT.description == ""
            ? NFT.contract.openSea.description
            : NFT.description,
        attributes: NFT.rawMetadata.attributes,
        standard: NFT.tokenType,
        creator: NFT.contract.contractDeployer,
        network: chain == undefined ? "Ethereum" : chain.name,
      };
      setData(dataObject);
      console.log("METADATA", NFT);
      console.log("DATA", dataObject);

      const details = [
        { trait_type: "Contract Address", value: address, key: 20 },
        { trait_type: "Token ID", value: tokenId, key: 21 },
        { trait_type: "Token Standard", value: NFT.tokenType, key: 22 },
        {
          trait_type: "Network",
          value: chain == undefined ? "Ethereum" : chain.name,
          key: 23,
        },
        {
          trait_type: "Creator",
          value: NFT.contract.contractDeployer,
          key: 24,
        },
      ];
      setDetailList(details);
      setLoading(false);
    }
    start();
  }, [tokenAddress]);

  console.log(attributeModal, detailModal);
  const router = useRouter();
  console.log(router.query);
  if (Object.keys(router.query).length === 0) {
    return (
      <>
        <Head>
          <title>NFT</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/blackhole1.ico" />
        </Head>
        <div class="fixed top-0 right-0 left-0 z-[100]">
          <Header />
        </div>
        <div class="fixed top-[15%] left-[5%]">
          <Link href="/myNFTs">Please go back to your collection page.</Link>
        </div>
      </>
    );
  } else {
    const expandAttributeModal = (index) => {
      setAttributeIndex(index);
      setAttributeModal(true);
    };

    const closeAttributeModal = () => {
      setAttributeIndex(-1);
      setAttributeModal(false);
    };

    const expandDetailModal = (index) => {
      setDetailIndex(index);
      setDetailModal(true);
    };

    const closeDetailModal = () => {
      setDetailIndex(-1);
      setDetailModal(false);
    };

    return (
      <>
        <Head>
          <title>{tokenId}</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/blackhole1.ico" />
        </Head>
        <div class="fixed top-0 right-0 left-0 z-[100]">
          <Header />
        </div>
        {loading == false && data.format == "mp4" ? (
          <main>
            <div class="flex flex-row space-x-5">
              <div class="m-5 mt-32 flex basis-[75%] flex-col justify-center space-y-5 p-10">
                <video
                  class="mx-3 mt-3 self-center rounded-xl shadow-2xl"
                  src={loading == false ? data.gateway : undefined}
                  autoPlay
                  loop
                  style={{
                    width: "auto",
                    maxWidth: "500px",
                    height: "auto",
                    maxHeight: "500px",
                  }}
                  alt={loading == false && data.description}
                />
                <div class="flex flex-col rounded-xl border border-gray-300 p-3">
                  <div class="rounded-xl border border-gray-300 p-3 text-xl font-bold">
                    Traits
                  </div>

                  <div class="grid grid-cols-4 gap-3 pt-3">
                    {loading == false &&
                      "attributes" in data &&
                      data.attributes != undefined &&
                      data.attributes.map((item, i) => {
                        return (
                          <button
                            key={item.key}
                            onClick={() => expandAttributeModal(i)}
                            class="item-center rounded-xl border border-gray-300"
                          >
                            <div class="truncate p-3 text-xs font-bold">
                              {item.trait_type}
                            </div>
                            <div class="truncate p-3">{item.value}</div>
                          </button>
                        );
                      })}
                  </div>

                  <DetailButton
                    isOpen={attributeModal}
                    title={
                      attributeIndex >= 0
                        ? data.attributes[attributeIndex].trait_type
                        : "title"
                    }
                    value={
                      attributeIndex >= 0
                        ? data.attributes[attributeIndex].value
                        : "value"
                    }
                    onClose={() => closeAttributeModal()}
                  />
                </div>
                <div class="flex flex-col gap-3 rounded-xl border border-gray-300 p-3">
                  <div class="rounded-xl border border-gray-300 p-3 text-xl font-bold">
                    Description
                  </div>

                  <div class="flex rounded-xl border border-gray-300 pt-3">
                    <div class="p-3">
                      {loading == false && data.description}
                    </div>
                  </div>
                </div>
                <div class="flex flex-col gap-3 rounded-xl border border-gray-300 p-3">
                  <div class="rounded-xl border border-gray-300 p-3 text-xl font-bold">
                    Details
                  </div>
                  <div class="grid grid-cols-4 gap-3 pt-3">
                    {detailList.map((item, i) => {
                      return (
                        <button
                          key={item.key}
                          onClick={() => expandDetailModal(i)}
                          class="item-center rounded-xl border border-gray-300"
                        >
                          <div class="truncate p-3 text-xs font-bold">
                            {item.trait_type}
                          </div>
                          <div class="truncate p-3">{item.value}</div>
                        </button>
                      );
                    })}
                  </div>
                  <DetailButton
                    isOpen={detailModal}
                    onClose={() => closeDetailModal()}
                    title={
                      detailIndex >= 0
                        ? detailList[detailIndex].trait_type
                        : "title"
                    }
                    value={
                      detailIndex >= 0 ? detailList[detailIndex].value : "value"
                    }
                  />
                </div>
              </div>
              <div class="flex-grid fixed top-[20%] right-[0%] w-[25%] max-w-[25%] border-l border-black p-5">
                <div class="ml-5 mb-2 truncate">
                  {loading == false && data.contractName}
                </div>
                <div class="ml-5 grow-0 flex-wrap text-2xl">
                  {loading == false && data.name}
                </div>
              </div>
            </div>
          </main>
        ) : (
          <main>
            <div class="flex flex-row space-x-5">
              <div class="m-5 mt-32 flex basis-[75%] flex-col justify-center space-y-5 p-10">
                <img
                  class="mx-3 mt-3 self-center rounded-xl shadow-2xl"
                  src={loading == false ? data.gateway : undefined}
                  style={{
                    width: "auto",
                    maxWidth: "500px",
                    height: "auto",
                    maxHeight: "500px",
                  }}
                />
                <div class="flex flex-col rounded-xl border border-gray-300 p-3">
                  <div class="rounded-xl border border-gray-300 p-3 text-xl font-bold">
                    Traits
                  </div>

                  <div class="grid grid-cols-4 gap-3 pt-3">
                    {loading == false &&
                      "attributes" in data &&
                      data.attributes != undefined &&
                      data.attributes.map((item, i) => {
                        return (
                          <button
                            key={item.key}
                            onClick={() => expandAttributeModal(i)}
                            class="item-center rounded-xl border border-gray-300"
                          >
                            <div class="truncate p-3 text-xs font-bold">
                              {item.trait_type}
                            </div>
                            <div class="truncate p-3">{item.value}</div>
                          </button>
                        );
                      })}
                  </div>

                  <DetailButton
                    isOpen={attributeModal}
                    title={
                      attributeIndex >= 0
                        ? data.attributes[attributeIndex].trait_type
                        : "title"
                    }
                    value={
                      attributeIndex >= 0
                        ? data.attributes[attributeIndex].value
                        : "value"
                    }
                    onClose={() => closeAttributeModal()}
                  />
                </div>
                <div class="flex flex-col gap-3 rounded-xl border border-gray-300 p-3">
                  <div class="rounded-xl border border-gray-300 p-3 text-xl font-bold">
                    Description
                  </div>

                  <div class="flex rounded-xl border border-gray-300 pt-3">
                    <div class="p-3">
                      {loading == false && data.description}
                    </div>
                  </div>
                </div>
                <div class="flex flex-col gap-3 rounded-xl border border-gray-300 p-3">
                  <div class="rounded-xl border border-gray-300 p-3 text-xl font-bold">
                    Details
                  </div>
                  <div class="grid grid-cols-4 gap-3 pt-3">
                    {detailList.map((item, i) => {
                      return (
                        <button
                          key={item.key}
                          onClick={() => expandDetailModal(i)}
                          class="item-center rounded-xl border border-gray-300"
                        >
                          <div class="truncate p-3 text-xs font-bold">
                            {item.trait_type}
                          </div>
                          <div class="truncate p-3">{item.value}</div>
                        </button>
                      );
                    })}
                  </div>
                  <DetailButton
                    isOpen={detailModal}
                    onClose={() => closeDetailModal()}
                    title={
                      detailIndex >= 0
                        ? detailList[detailIndex].trait_type
                        : "title"
                    }
                    value={
                      detailIndex >= 0 ? detailList[detailIndex].value : "value"
                    }
                  />
                </div>
              </div>
              <div class="flex-grid fixed top-[20%] right-[0%] max-w-[25%] basis-[10%] border-l border-black p-5">
                <div class="ml-5 mb-2 truncate">
                  {loading == false && data.contractName}
                </div>
                <div class="ml-5 grow-0 flex-wrap text-2xl">
                  {loading == false && data.name}
                </div>
              </div>
            </div>
          </main>
        )}
      </>
    );
  }
}

export async function getServerSideProps(context) {
  console.log(context);
  return {
    props: {
      address: JSON.parse(context.query.nft).address,
      tokenId: JSON.parse(context.query.nft).tokenId,
    }, // will be passed to the page component as props
  };
}
